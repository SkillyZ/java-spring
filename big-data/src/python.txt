def loadDataSet():
    '返回测试数据'
    
    return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]

#===================================
# 输入:
#        dataSet: 数据集
# 输出:
#        map(frozenset, C1): 候选集
#===================================
def createC1(dataSet):
    '创建候选集'
    
    C1 = []
    for transaction in dataSet:
        for item in transaction:
            if not [item] in C1:
                C1.append([item])
                
    C1.sort()
    
    # 返回的集合元素都是frozenset类型 -> 因为以后要用来做键。
    return map(frozenset, C1)

#=============================================
# 输入:
#        D: 数据集 (set格式)
#        Ck: 候选集
#        minSupport: 最小支持度
# 输出:
#        retList: 过滤集
#        supportData: 支持集(挖掘关联规则时使用)
#=============================================
def scanD(D, Ck, minSupport):
    '由候选集得到过滤集'
    
    # 统计候选元素出现的次数
    ssCnt = {}
    for tid in D:
        for can in Ck:
            if can.issubset(tid):
                if not ssCnt.has_key(can): ssCnt[can]=1
                else: ssCnt[can] += 1
                
    # 构建过滤集和支持集
    numItems = float(len(D))
    retList = []
    supportData = {}
    for key in ssCnt:
        support = ssCnt[key]/numItems
        if support >= minSupport:
            retList.insert(0,key)
        supportData[key] = support
        
    return retList, supportData

#===================================
# 输入:
#        Lk: 过滤集
#        k: 当前项集元素个数
# 输出:
#        retList: 候选集
#===================================
def aprioriGen(Lk, k):
    '由过滤集得到候选集'
    
    # 重组过滤集，得到新的候选集。
    retList = []
    lenLk = len(Lk)
    for i in range(lenLk):
        for j in range(i+1, lenLk): 
            # 留意下重组技巧
            L1 = list(Lk[i])[:k-2]; L2 = list(Lk[j])[:k-2]
            L1.sort(); 
            L2.sort()
            if L1==L2:
                retList.append(Lk[i] | Lk[j])
                
    return retList

#=============================================
# 输入:
#        dataSet: 数据集
#        minSupport: 最小支持度
# 输出:
#        L: 频繁集
#        supportData: 支持集(挖掘关联规则时使用)
#=============================================
def apriori(dataSet, minSupport = 0.5):
    '求频繁项集及其对应支持度'
    
    C1 = createC1(dataSet)
    D = map(set, dataSet)
    L1, supportData = scanD(D, C1, minSupport)
    L = [L1]
    k = 2
    while (len(L[k-2]) > 0):
        Ck = aprioriGen(L[k-2], k)
        Lk, supK = scanD(D, Ck, minSupport)
        supportData.update(supK)
        L.append(Lk)
        k += 1
        
    return L, supportData
    
def main():
    'Apriori频繁集检索'
    
    L, s = apriori (loadDataSet())
    
    print L
    print s



    ---------------------------------------------------------------------------------------
    #===================================
    # 输入:
    #        L: 频繁集
    #        supportData: 支持集
    #        minConf: 最小可信度
    # 输出:
    #        bigRuleList: 规则集
    #===================================
    def generateRules(L, supportData, minConf=0.7):
        '从某个频繁集中学习关联规则'

        bigRuleList = []
        for i in range(1, len(L)):
            for freqSet in L[i]:
                H1 = [frozenset([item]) for item in freqSet]
                if (i > 1):
                    rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf)
                else:
                    calcConf(freqSet, H1, supportData, bigRuleList, minConf)
        return bigRuleList

    #===================================
    # 输入:
    #        L: 频繁集
    #        supportData: 支持集
    #        minConf: 最小可信度
    # 输出:
    #        bigRuleList: 规则集
    #===================================
    def calcConf(freqSet, H, supportData, brl, minConf=0.7):
        '可信度过滤'

        prunedH = []
        for conseq in H:
            conf = supportData[freqSet]/supportData[freqSet-conseq]
            if conf >= minConf:
                brl.append((freqSet-conseq, conseq, conf))
                prunedH.append(conseq)

        return prunedH

    def rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7):
        '从某个频繁项集中学习关联规则'

        # 本次学习的规则右部中的元素个数
        m = len(H[0])
        if (len(freqSet) > (m + 1)):
            # 重组规则右部
            Hmp1 = aprioriGen(H, m+1)
            # 规则学习
            Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)
            if (len(Hmp1) > 1):
                # 递归学习函数
                rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)

    def main():
        '关联规则学习'

        L, s = apriori (loadDataSet())

        rules = generateRules(L, s)
        print rules